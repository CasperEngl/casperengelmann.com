---
import ms from 'ms'
import { z } from 'zod'
import OutboundLink from '~/components/outbound-link.astro'
import { getStarredRepos, repoSchema } from '~/services/github'
import { redis } from '~/services/redis'

const cachedReposSchema = z.object({
  expiresAt: z.string(),
  repos: z.array(repoSchema),
})

if (!redis.isOpen) {
  await redis.connect()
}

const cachedReposData = await redis.get('starred-repos')
const cachedRepos = cachedReposData
  ? cachedReposSchema.parse(JSON.parse(cachedReposData))
  : null

let starredRepos = cachedRepos?.repos

if (!starredRepos) {
  starredRepos = await getStarredRepos()

  const expires = ms('1 hour')
  const expiryDate = new Date(Date.now() + expires)
  const body = {
    expiresAt: new Intl.DateTimeFormat('en-GB', {
      dateStyle: 'short',
      timeStyle: 'medium',
      timeZone: 'Europe/Copenhagen',
    }).format(expiryDate),
    repos: starredRepos,
  } satisfies z.infer<typeof cachedReposSchema>

  await redis.set('starred-repos', JSON.stringify(body), {
    EX: expires / 1000,
  })
}

if (redis.isOpen) {
  await redis.disconnect()
}
---

<ul>
  {
    starredRepos?.map((repo) => (
      <li>
        <OutboundLink href={repo.html_url}>{repo.full_name}</OutboundLink>
      </li>
    ))
  }
</ul>
